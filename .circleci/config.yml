version: 2.1

orbs:
  slack: circleci/slack@4.12.1
  node: circleci/node@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here 
      workflow_id: 
        type: string
        
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here

            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-stack-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-stack-frontend-<< parameters.workflow_id >>

            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          
          when: on_fail # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure  https://kvdb.io/CABr8rm7FqeskeNbCghtvC/cicd-db-migration-<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
                cd ~/project/backend
                npm install
            #  Add revert code here. You can find this in the Getting Started section.
                npm run migration:revert
            #exit 1
            fi

  slacknotify:
    description: failed job notification
    steps:
      - slack/notify: 
          channel: C04KNV5EBKN
          event: fail
          template: basic_fail_1
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slacknotify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here

             cd backend
             npm install
             npm run build


      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slacknotify

  test-frontend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [frontend-build]

      # Your job code here
      - run: 
          name: test-frontend
          command: | 
            cd frontend
            npm install
            npm run test

      
      - slacknotify
            
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      - run: # Your job code here
          name: test-backend
          command: |
            cd backend
            npm install
            npm run test
            

      - slacknotify


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys:  [frontend-build]
      - run: # Your job code here
          name: scan-frontend
          command: | 
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      # Your job code here
      - run: 
          name: scan-backend
          command: | 
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run: 
          name: install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name udapeople-stack-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
              


      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name udapeople-stack-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              

              
      - run:
          name: Add back-end "IP" to ansible inventory
          command: |
            # Your code here
            #echo "[web]" > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt

            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment: # Here's where you will add some code to rollback on failure
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - slacknotify

  configure-infrastructure:
    docker:
      - image: python:3.9.16-alpine3.17 # Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys: # Add ssh keys with fingerprint
          fingerprints: ["e1:e2:30:0c:61:c4:50:90:a3:6c:23:5a:72:0e:8d:2c"]
      
      - attach_workspace: # attach workspace
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            # Your code here
            
            apk add --update tar gzip ansible
            pip install awscli

            #exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook --user=ubuntu -vvvv -i inventory.txt configure-server.yml 
            
            #exit 1
      - destroy-environment: # Here's where you will add some code to rollback on failure      
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - slacknotify

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 # Docker image here that supports NodeJS
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli curl

      - run:
          name: Run migrations
          command: |
            # Your code 

            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            npm audit fix --force

            # Run and save the migration output

            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here

            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/CABr8rm7FqeskeNbCghtvC/cicd-db-migration-$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
            
            fi

            #exit 1
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git

      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Install dependencies
          command: |
            # your code here
            apt install tar gzip ansible npm
            
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress')

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      - destroy-environment: # Here's where you will add some code to rollback on failure      
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-backend:
    docker:
      - image: python:3.9.16-alpine3.17 # Docker image here that supports Ansible
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys: # Add ssh keys with fingerprint 
          fingerprints: ["e1:e2:30:0c:61:c4:50:90:a3:6c:23:5a:72:0e:8d:2c"]
      
      # attach workspace
      - attach_workspace: # attach workspace
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible tar gzip nodejs npm
            /usr/local/bin/python -m pip install --upgrade pip
            pip install awscli

      - run:
          name: Deploy backend
          command: |
            # your code here

            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is ------: "
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment: # Here's where you will add some code to rollback on failure  
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16 # Lightweight Docker image 
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible tar gzip curl aws-cli nodejs npm
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
      - run:
          name: Backend smoke test.
          command: |
            # your code here

            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)  

            echo ${BACKEND-IP}
            export API_URL = "http://${BACKEND_IP}:3030"

            if curl -s ${API_URL}/api/status" | grep "ok"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here

            FRONTEND-URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${FRONTEND-URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  cloudfront-update:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            
           
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack-cicd-samnzay \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  cleanup:
      docker:
        - image: amazon/aws-cli # Docker image here
      steps:
        - checkout # Checkout code from git
        - run: yum install -y tar gzip
        - run:
            name: Get old stack workflow id
            command: |
              # your code here

              export OldWorkflowID="$(aws cloudformation list-exports \
                --query "Exports[?Name==\`WorkflowID\`].Value" \ 
                --no-paginate --output text )"

              echo OldWorkflowID: "${OldWorkflowID}"

              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

              export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE \
                --no-paginate \
                --output text )) 

              echo Stack Names: "${STACKS[@]}"

        - run:
            name: Remove old stacks and files
            command: |
              # You can use any condition like:
              # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
              # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
              
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
              then
                # your code here

                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  aws cloudformation delete-stack --stack-name "samnzay-stack-frontend-${OldWorkflowID}"
                  aws cloudformation delete-stack --stack-name "samnzay-stack-backend-${OldWorkflowID}"

                  echo "Delete Blue Deployments Confirmed..."
              else
                  echo "......Can Not Clean deployments...."
              fi

  deploy:
    executor:
      name: node/default
    steps:
      #- checkout
      #- node/install-packages
      #- run: 
          #command: npm run deploy 
      - slack/notify: 
          channel: C04KNV5EBKN
          event: fail
          template: basic_fail_1



workflows:
  my_cicd_default_workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure: 
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      #- deploy-frontend:
          #requires: [run-migrations]
      #- deploy-backend:
          #requires: [run-migrations]
      #- smoke-test:
          #requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
          #requires: [smoke-test]
      #- cleanup:
          #requires: [cloudfront-update]