version: 2.1

orbs:
  slack: circleci/slack@4.12.1
  node: circleci/node@4.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here 
      workflow_id: 
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here

            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          
          when: on_fail # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS=$(curl --insecure https://kvdb.io/CABr8rm7FqeskeNbCghtvC/db_migration_<<parameters.workflow_id>>)
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/the_old_workflow_id)
            
            echo $SUCCESS
            if (( $SUCCESS == 11 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

  slacknotify:
    description: failed job notification
    steps:
      - slack/notify: 
          channel: C04KNV5EBKN
          event: fail
          template: basic_fail_1
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slacknotify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here

             cd backend
             npm install
             npm run build


      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slacknotify

  test-frontend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [frontend-build]

      # Your job code here
      - run: 
          name: test-frontend
          command: | 
            cd frontend
            npm install
            npm run test

      - slacknotify
            
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      - run: # Your job code here
          name: test-backend
          command: |
            cd backend
            npm install
            npm run test
            

      - slacknotify


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys:  [frontend-build]
      - run: # Your job code here
          name: scan-frontend
          command: | 
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

      - slacknotify
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      # Your job code here
      - run: 
          name: scan-backend
          command: | 
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

      - slacknotify

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run: 
          name: install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add back-end "IP" to ansible inventory
          command: |
            # Your code here
            #echo "[web]" > inventory.txt
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )

            echo Backend_Public_IP: ${BACKEND_IP}

            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
            
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment: # Here's where you will add some code to rollback on failure
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - slacknotify
  
  configure-infrastructure:
    docker:
      # Docker image that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: 
            - "e1:e2:30:0c:61:c4:50:90:a3:6c:23:5a:72:0e:8d:2c"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      
      - run:
          name: Configure server
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - slacknotify

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install

      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/CABr8rm7FqeskeNbCghtvC/db_migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'

              echo "DB migration executed successfully"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - slacknotify


  deploy-frontend:
    docker:
      #- image: amazon/aws-cli # Docker image here that supports AWS CLI
      - image:  cimg/base:2022.06
    steps:
      - checkout # Checkout code from git

      - restore_cache:
          keys: [build-frontend]

      - attach_workspace:
          at: ~/

      - run:
          name: Install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Install Node.js 13
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
            
      

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)

            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo "API_URL=${API_URL}"
            echo ENVIRONMENT=production >> "frontend/.env"
            echo API_URL=http://${BACKEND_PUBLIC_IP}:3030 >> frontend/.env
            
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            #tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            ls
            

      - destroy-environment: # Here's where you will add some code to rollback on failure      
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - slacknotify

  deploy-backend:
    docker:
      # Docker image that supports Ansible
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - add_ssh_keys:
          fingerprints: 
            - "21:5f:82:3c:6b:f7:53:e5:f9:75:8c:96:a3:54:ec:06"

      - run:
          name: Install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Install Node.js 13
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

      - attach_workspace:
          at: ~/

      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install

      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv backend/artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - slacknotify


  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --update npm
            apk add --no-cache python3 py3-pip \
              && pip3 install --upgrade pip \
              && pip install awscli
      
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region us-east-1 \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl -s "${API_URL}/api/status" -v

            if curl -s "${API_URL}/api/status" -v  | grep "ok"
            then
                 
              echo "backend smoketest succeed"
              exit 0
              
            else
              echo "Backend smoke test failed. check the issue"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              echo "frontend smoke test success"
              exit 1
            else
              echo "frontend smoke test failed"
              exit 1
            fi

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - slacknotify
  
  cloudfront-update:
    docker:
      - image: cimg/base:stable # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install awscli
          command: |
            # your code here
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Install Nodejs 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
      - run:
          name: Save the old_workflow_id to kvdb.io
          #working_directory: ~/.circleci/files
          command: |
            # your code here

            export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"

            curl https://kvdb.io/${KVDB_BUCKET}/the_old_workflow_id -d "${OldWorkflowID}"


      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

            echo Current WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

      - slacknotify

  cleanup:
      docker:
        - image: cimg/base:stable # Docker image here...
      steps:

        - checkout # Checkout code from git

        - run:
            name: Install awscli
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

        - run:
            name: Install Node.js 13
            command: |
              # Install Node.js LTS version as our base Node.js version
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt install -y nodejs
              # Use n version manager to use Node.js v13.8.0
              sudo npm install --global n
              sudo n 13.8.0
     
        - run:
            name: Fetch Olfworkflow & Delete old stacks and files
            command: |
              export STACKS=($(aws cloudformation list-stacks \
                  --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE \
                  --no-paginate --output text )) 

              echo Stack Names: "${STACKS[@]}"

              # You can use any condition like:
              # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
              # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]

              export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/the_old_workflow_id)

              echo Old Workflow ID: "${OldWorkflowID}"
              echo Current workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
              

              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here

                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                  aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"

                  echo "Clean Deployments Confirmed..."
              else
                  echo "......Can Not Clean deployments..."
                  
              fi

        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

        - slacknotify


workflows:
  my_cicd_default_workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure: 
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]